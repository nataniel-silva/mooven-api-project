# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'pt_BR'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        #bind:
            #$isDebug: '%kernel.debug%' 

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
    
    # A sessão PHP fica no banco
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        - '%env(DATABASE_URL)%'
        - { db_table: 'security.session' }
        
    # Registro este serviço, pois ele está em uma pasta que não registra serviços automaticamente
    App\Entity\EntityFactory:
        calls:
            - [setTranslator, ['@Symfony\Contracts\Translation\TranslatorInterface']]
            - [setRegistry, ['@Symfony\Bridge\Doctrine\RegistryInterface']]
    
    App\EventListener\LoadedEntityDependencyInjection:
        tags:
            - { name: doctrine.event_listener, event: postLoad }
            
    App\EventListener\ExceptionHandler:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
        #arguments:
            #$kernelEnv: '%kernel.environment%'
            
    App\EventListener\SingletonDependencyInjection:
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 9999999 }
            - { name: kernel.event_listener, event: console.command }
        arguments:
            $kernelEnv: '%kernel.environment%'

    App\EventListener\ConsoleExceptionHandler:
        tags:
            - { name: kernel.event_listener, event: console.error }
            
    App\EventListener\CORSHandler:
        tags:
            - { name: kernel.event_listener, event: kernel.response }
            
    App\EventListener\LoginFailureHandler:
        tags:
            - { name: kernel.event_listener, event: security.authentication.failure }
            
    App\EventListener\RequestBodyHandler:
        tags:
            - { name: kernel.event_listener, event: kernel.controller }
            
    _instanceof:
        # Serviços/classes que utilizam a trait de dependências (DefaultTrait) devem implementar esta interface para fazer a injeção de dependências corretamente
        App\DefaultInterface:
            calls:
                - [setTranslator, ['@Symfony\Contracts\Translation\TranslatorInterface']]
                - [setRegistry, ['@Symfony\Bridge\Doctrine\RegistryInterface']]
                - [setEntityFactory, ['@App\Entity\EntityFactory']]
        # Classes de negócio devem utilizar a interface BOInterface e a BOTrait, que a implementa
        App\Business\BOInterface:
            calls:
                - [setValidator, ['@App\Utils\Validator']]
